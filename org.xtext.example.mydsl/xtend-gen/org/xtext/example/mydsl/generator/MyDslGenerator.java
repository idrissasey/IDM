/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import idm.tp1.State;
import idm.tp1.StateMachine;
import idm.tp1.Transition;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    StateMachine mysm = ((StateMachine) _get);
    final Consumer<State> _function = (State s) -> {
      String _name = s.getName();
      String _plus = ("../src/Concrete/" + _name);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.print(s));
    };
    mysm.getState().forEach(_function);
    final Consumer<Transition> _function_1 = (Transition t) -> {
      String _name = t.getName();
      String _plus = ("../src/Concrete/" + _name);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, this.print(t));
    };
    mysm.getTransition().forEach(_function_1);
    fsa.generateFile("../src/Abstract/Transition.java", this.printAbstractTransition());
    fsa.generateFile("../src/Abstract/State.java", this.printAbstractState());
    fsa.generateFile("../src/Concrete/ProgramPrincipal.java", this.printMain());
  }
  
  public CharSequence printMain() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package Concrete;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ProgramPrincipal {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Down d = new Down();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("d.setCurrent(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Opened o = new Opened();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Open op = new Open(d, o);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Changement d\'état reussi? \" + op.transit());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence print(final State s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package Concrete;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import Abstract.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name = s.getName();
    _builder.append(_name);
    _builder.append(" extends State{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Transition outgoing;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Transition incoming;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_1 = s.getName();
    _builder.append(_name_1, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_2 = s.getName();
    _builder.append(_name_2, "\t");
    _builder.append("(Transition outgoing, Transition incoming, boolean current) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.outgoing = outgoing;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.incoming = incoming;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.current = current;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean getCurrent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return super.current;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setCurrent(boolean value){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.current = value;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence print(final Transition t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package Concrete;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import Abstract.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name = t.getName();
    _builder.append(_name);
    _builder.append(" extends Transition{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State from;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("State to;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_1 = t.getName();
    _builder.append(_name_1, "\t");
    _builder.append("(State from, State to) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.to = to;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.from= from;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean transit() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(from.getCurrent()==true) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("from.setCurrent(false);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("to.setCurrent(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence printAbstractTransition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package Abstract;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Transition {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean transit() {return false;}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence printAbstractState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package Abstract;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class State {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected boolean current;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean getCurrent(){return false;};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setCurrent(boolean value){};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
