/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import idm.tp1.StateMachine
import idm.tp1.State
import idm.tp1.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var mysm = resource.contents.get(0) as StateMachine
		mysm.state.forEach[s | fsa.generateFile("../src/Concrete/"+s.name+".java", s.print)]
		mysm.transition.forEach[t | fsa.generateFile("../src/Concrete/"+t.name+".java", t.print)]
		
		fsa.generateFile("../src/Abstract/Transition.java", printAbstractTransition())
		
		fsa.generateFile("../src/Abstract/State.java", printAbstractState())
		
		fsa.generateFile("../src/Concrete/ProgramPrincipal.java", printMain())
	}
	
	def printMain() {
		'''
		package Concrete;
		
		import Abstract.*;
		
		
		public class ProgramPrincipal {
		
			public static void main(String[] args) {
				Down d = new Down();
				d.setCurrent(true);
				Opened o = new Opened();
				Open op = new Open(d, o);
				System.out.println("Changement d'état reussi? " + op.transit());
			}
		}

		
		'''
	}
	
	def print(State s) {
		'''
		package Concrete;
		
		import Abstract.*;
		
		class «s.name» extends State{
			
			Transition outgoing;
			Transition incoming;
						
			
			public «s.name»(){
				
			}			
			
			public «s.name»(Transition outgoing, Transition incoming, boolean current) {
				this.outgoing = outgoing;
				this.incoming = incoming;
				super.current = current;
			}
			public boolean getCurrent(){
				return super.current;
			}
			
			public void setCurrent(boolean value){
				super.current = value;
				}
		}
		
		'''
	}
	
	
	
	def print(Transition t) {
				'''
		package Concrete;
		
		import Abstract.*;
		
		class «t.name» extends Transition{
			
			State from;
			State to;
						
			public «t.name»(State from, State to) {
				this.to = to;
				this.from= from;
			}
			
			public boolean transit() {
				if(from.getCurrent()==true) {
					from.setCurrent(false);
					to.setCurrent(true);
					return true;
				}
				return false;
				
			}
		}
		
		'''
	}
	def printAbstractTransition(){
		'''
		package Abstract;
		
		public abstract class Transition {
			public boolean transit() {return false;}
		}
		'''
	}
	
	def printAbstractState(){
		'''
		package Abstract;
		
		public abstract class State {
			protected boolean current;
			
			public boolean getCurrent(){return false;};
			public void setCurrent(boolean value){};
			
		}
		'''
	}
}
